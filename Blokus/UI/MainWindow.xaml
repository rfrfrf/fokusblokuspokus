<Window x:Class="Blokus.UI.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:conv="clr-namespace:Blokus.Misc"
    xmlns:usr="clr-namespace:Blokus.UI"
    xmlns:logic="clr-namespace:Blokus.Logic"
    xmlns:logicAlphaBeta="clr-namespace:Blokus.Logic.AlphaBeta"
    xmlns:logicScout="clr-namespace:Blokus.Logic.Scout"
    xmlns:logicMcts="clr-namespace:Blokus.Logic.MCTS"
    xmlns:logicMcts2="clr-namespace:Blokus.Logic.MCTS2v2"
    xmlns:logicRandom="clr-namespace:Blokus.Logic.RandomPlayer"
    xmlns:logicHeuristics="clr-namespace:Blokus.Logic.Heuristics"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    Title="Blokus Duo" 
    Closing="Window_Closing"
    MouseWheel="Window_MouseWheel" 
    Height="677" Width="729"    
    Background="#162640"
    >
    <Window.Resources>
        <x:Array Type="{x:Type logicHeuristics:HeuristicsBase}" x:Key="orangeHeuristicsDataSource">
            <logicHeuristics:NaiveHeuristics/>
            <logicHeuristics:EpicHeuristics/>
        </x:Array>
        <x:Array Type="{x:Type logicHeuristics:HeuristicsBase}" x:Key="violetHeuristicsDataSource">
            <logicHeuristics:NaiveHeuristics/>
            <logicHeuristics:EpicHeuristics/>
        </x:Array>
        <x:Array Type="{x:Type logic:PlayerBase}" x:Key="orangePlayersDataSource">
            <logic:HumanPlayer />
            <logicAlphaBeta:AlphaBetaPlayer />
            <logicScout:ScoutPlayer />
            <logicMcts:MCSTPlayer />
            <logicMcts2:MCTS2v2Player />
            <logicRandom:RandomPlayer />
        </x:Array>
        <x:Array Type="{x:Type logic:PlayerBase}" x:Key="violetPlayersDataSource">
            <logic:HumanPlayer />
            <logicAlphaBeta:AlphaBetaPlayer />
            <logicScout:ScoutPlayer />
            <logicMcts:MCSTPlayer />
            <logicMcts2:MCTS2v2Player />
            <logicRandom:RandomPlayer />
        </x:Array>
        <Style TargetType="CheckBox">
            <Setter Property="TextBlock.Foreground" Value="White"/>
        </Style>
        <Style TargetType="{x:Type TextBlock}" >
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Margin" Value="2" />
        </Style>
        <Style TargetType="{x:Type Expander}" >
            <Setter Property="Foreground" Value="White"/>
        </Style>
        <Style TargetType="{x:Type ComboBox}">
            <Setter Property="Background" Value="#10405f" />
            <Setter Property="ItemsPanel">
                <Setter.Value>
                    <ItemsPanelTemplate>
                        <StackPanel Background="#10405f"/>
                    </ItemsPanelTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type ListBox}">
            <Setter Property="Background" Value="#10405f" />
        </Style>
        <Style TargetType="{x:Type Button}">
            <Setter Property="Background" Value="#10405f" />
            <Setter Property="Foreground" Value="White"/>
        </Style>
    </Window.Resources>    
    <Grid>
        <Grid.Background>
            <ImageBrush ImageSource="http://www.actuate.com/images/int/chrome/bg.jpg" Stretch="UniformToFill"  />
        </Grid.Background>
        <Grid.RowDefinitions>
            <RowDefinition Height="40"/>
            <RowDefinition Height="28"/>
            <RowDefinition Height="28"/>
            <RowDefinition Height="28"/>
            <RowDefinition Height="350"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="130"/>
            <ColumnDefinition/>
            <ColumnDefinition Width="130"/>
        </Grid.ColumnDefinitions>
        <TextBlock 
            FontWeight="Bold"
            Text="Gracz pomarańczowy" 
            Foreground="Orange"
            HorizontalAlignment="Center" VerticalAlignment="Center">
             <TextBlock.Style>
                <Style>
                    <Style.Triggers>
                        <DataTrigger 
                                Binding="{Binding Path=IsOrangeWinner}" 
                                Value="true">
                            <Setter Property="TextBlock.BitmapEffect">
                                <Setter.Value>
                                    <OuterGlowBitmapEffect GlowColor="#12a170" GlowSize="6" />
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </TextBlock.Style>
        </TextBlock>
        <TextBlock 
            FontWeight="Bold"
            Grid.Column="2"
            Foreground="Violet"
            Text="Gracz fioletowy" 
            HorizontalAlignment="Center" VerticalAlignment="Center"
            >
            <TextBlock.Style>
                <Style>
                    <Style.Triggers>
                        <DataTrigger 
                                Binding="{Binding Path=IsVioletWinner}" 
                                Value="true">
                            <Setter Property="TextBlock.BitmapEffect">
                                <Setter.Value>
                                    <OuterGlowBitmapEffect GlowColor="#12a170" GlowSize="6" />
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </TextBlock.Style>
        </TextBlock>
        <TextBlock 
            Grid.Column="1"
            FontSize="22" 
            FontFamily="Arial Black" 
            HorizontalAlignment="Center" 
            VerticalAlignment="Center"
            Foreground="#9274dd">
            Blokus Duo
        </TextBlock>
        <ComboBox                    
            Margin="2"
            Grid.Row="1"
            ItemsSource="{Binding Source={StaticResource orangePlayersDataSource}}" 
            SelectedValue="{Binding OrangePlayer}" Loaded="ComboBox_Loaded" />
        <ComboBox                    
            Margin="2"
            Grid.Row="2"
            ItemsSource="{Binding Source={StaticResource orangeHeuristicsDataSource}}" 
            SelectedValue="{Binding OrangeHeuristics}" Loaded="heuristicsComboBox_Loaded" />
        <CheckBox 
            Grid.Row="3"
            Foreground="Blue"
            VerticalAlignment="Center"
            HorizontalAlignment="Center"
            IsChecked="{Binding OrangeHeuristics.IsNonDeterministic}" 
            Content="Niedeterminizm" 
            ToolTip="Zaznaczenie powoduje, że heurystyka pomarańczowego gracza jest niedeterministyczna." 
            />
        <Grid                 
            Grid.Row="1"
            Grid.Column="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Button 
                ToolTip="Rozgrywa jedną partię między pomarańczowym a fioletowym graczem"
                Margin="2"
                Width="100"
                x:Name="NewGameButton"
                Command="{Binding Path=NewGameCommand}" 
                >
                <Button.Style>
                    <Style
                        TargetType="Button"
                        BasedOn="{StaticResource {x:Type Button}}">
                        <Setter Property="Button.Content" Value="Nowa gra"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Path=IsGameInProgress}" Value="True">
                                <Setter Property="Button.Content" Value="Stop"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>            
            </Button>
            <Button 
                ToolTip="Rozgrywa wiele partii między pomarańczowym a fioletowym graczem"
                Margin="2"
                Width="100"
                Grid.Column="1"
                Command="{Binding Path=TrainCommand}" 
                >
                <Button.Style>
                    <Style
                        TargetType="Button"
                        BasedOn="{StaticResource {x:Type Button}}">
                        <Setter Property="Button.Content" Value="Trenuj"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Path=IsGameInProgress}" Value="True">
                                <Setter Property="Button.Content" Value="Stop"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
            <CheckBox 
                Grid.Column="2"
                Foreground="Blue"
                VerticalAlignment="Center"
                HorizontalAlignment="Center"
                IsChecked="{Binding SwapPlayers}" 
                Content="Zamieniaj graczy" 
                ToolTip="Zaznaczenie powoduje, że gracze będą zamieniani co partię miejscami podczas treningu." 
                />
        </Grid>        
        <ComboBox 
            SelectedIndex="2"
            Margin="2"
            Grid.Row="1"
            Grid.Column="2"
            ItemsSource="{Binding Source={StaticResource violetPlayersDataSource}}" 
            SelectedValue="{Binding VioletPlayer}" Loaded="ComboBox_Loaded_1" />
        <ComboBox                    
            Margin="2"
            Grid.Row="2"
            Grid.Column="2"
            ItemsSource="{Binding Source={StaticResource violetHeuristicsDataSource}}" 
            SelectedValue="{Binding VioletHeuristics}" Loaded="heuristicsComboBox_Loaded" />
        <CheckBox 
            Grid.Row="3"
            Grid.Column="2"
            Foreground="Blue"
            VerticalAlignment="Center"
            HorizontalAlignment="Center"
            IsChecked="{Binding VioletHeuristics.IsNonDeterministic}" 
            Content="Niedeterminizm" 
            ToolTip="Zaznaczenie powoduje, że heurystyka fioletowego gracza jest niedeterministyczna." 
            />
        <Border
            Grid.Row="4" 
            BorderBrush="LimeGreen"
            CornerRadius="8"
            >
            <Border                 
                BorderBrush="Purple"
                CornerRadius="5"
                >
                <usr:HandControl             
                    Hand="{Binding Path=OrangeHand}"
                    HandOwner="{x:Static logic:Player.Orange}"
                    Click="Hand_Click"                
                    />  
                <Border.Style>
                    <Style>
                        <Setter Property="Border.BorderThickness" Value="0"/>
                        <Style.Triggers>
                            <DataTrigger 
                                Binding="{Binding Path=CurrentPlayerColor}" 
                                Value="{x:Static logic:Player.Orange}">
                                <Setter Property="Border.BorderThickness" Value="3"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
            </Border>
            <Border.Style>
                <Style>
                    <Setter Property="Border.BorderThickness" Value="0"/>
                    <Style.Triggers>
                        <DataTrigger 
                                Binding="{Binding Path=IsOrangeWinner}" 
                                Value="true">
                            <Setter Property="Border.BorderThickness" Value="5"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Border.Style>
        </Border>    
        <Grid  
            x:Name="BoardGrid"
            Grid.Column="1"
            Grid.Row="4" 
            Width="308"
            Height="308"
            MouseMove="Grid_MouseMove"
            >    
            <usr:BoardControl 
                Board="{Binding Path=Board}"       
                Click="Board_Click"
                />
            <Canvas>
                <usr:PieceControl
                    x:Name="PieceControl"
                    Piece="{Binding Path=CurrentPieceVariant}"
                    PieceColor="{Binding Path=CurrentPlayerColor, Converter={conv:PlayerToBrushConverter}}"  />
            </Canvas>
        </Grid>
        <Border
            Grid.Row="4" 
            Grid.Column="2" 
            BorderBrush="LimeGreen"
            CornerRadius="8"
            >
            <Border 
                BorderBrush="Purple"
                CornerRadius="5"
                >
                <usr:HandControl 
                    Hand="{Binding Path=VioletHand}"
                    HandOwner="{x:Static logic:Player.Violet}"
                    Click="Hand_Click"
                    />
                <Border.Style>
                    <Style>
                        <Setter Property="Border.BorderThickness" Value="0"/>
                        <Style.Triggers>
                            <DataTrigger 
                                Binding="{Binding Path=CurrentPlayerColor}" 
                                Value="{x:Static logic:Player.Violet}">
                                <Setter Property="Border.BorderThickness" Value="3"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
            </Border>
            <Border.Style>
                <Style>
                    <Setter Property="Border.BorderThickness" Value="0"/>
                    <Style.Triggers>
                        <DataTrigger 
                                Binding="{Binding Path=IsVioletWinner}" 
                                Value="true">
                            <Setter Property="Border.BorderThickness" Value="5"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Border.Style>
        </Border>
        <Grid Grid.ColumnSpan="3" Grid.Row="5">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Expander Header="Parametry"  IsExpanded="False">
                <usr:TreeSearchParameters DataContext="{Binding OrangePlayer}" />
            </Expander>
            <Expander Header="Parametry" Grid.Column="2" >
                <usr:TreeSearchParameters DataContext="{Binding VioletPlayer}" />
            </Expander>
            <Expander Grid.Column="1" Header="Statystyki treningu" IsExpanded="False">
                <WrapPanel Orientation="Horizontal">
                    <TextBlock Text="Rozegrane partie: "/>
                    <TextBlock Text="{Binding Path=PlayedGames}" />
                    <TextBlock Text="Wygrane pomarańczowego: "/>
                    <TextBlock Text="{Binding Path=OrangeWins}" />
                    <TextBlock Text="Procent wygranych: "/>
                    <TextBlock Text="{Binding Path=OrangePercentageWins, StringFormat='{}{0:P2}'}" />
                </WrapPanel>
            </Expander>    
        </Grid>
    </Grid>
</Window>
